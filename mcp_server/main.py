# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:48:49+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    CaseType,
    IdType,
    LoremType,
    NameType,
    NumberValidation,
    TextActionType,
    TextDto,
    TextType,
)

app = MCPProxy(
    title='Randommer API',
    version='v1',
)


@app.get('/api/Card', tags=['card_management'])
def get_api__card(
    type: Optional[str] = None,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get Card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Card/Types', tags=['card_management'])
def get_api__card__types(x__api__key: Optional[str] = Header(None, alias='X-Api-Key')):
    """
    Get available card types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Finance/Countries',
    tags=['financial_data_operations', 'name_and_culture_insights'],
)
def get_api__finance__countries(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    """
    Get available countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Finance/CryptoAddress', tags=['financial_data_operations'])
def get_api__finance__crypto_address(
    crypto_type: Optional[constr(max_length=100)] = Query(None, alias='cryptoType'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get crypto address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Finance/CryptoAddress/Types', tags=['financial_data_operations'])
def get_api__finance__crypto_address__types(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    """
    Get available crypto types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Finance/Iban/{countryCode}', tags=['financial_data_operations'])
def get_api__finance__iban__country_code(
    country_code: constr(max_length=2) = Path(..., alias='countryCode'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get IBAN by countryCode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/Finance/Vat/Validator',
    tags=['personal_identification_services', 'financial_data_operations'],
)
def post_api__finance__vat__validator(
    country: str,
    vat: str = ...,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Misc/Cultures', tags=['financial_data_operations'])
def get_api__misc__cultures(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Misc/Random-Address',
    tags=['financial_data_operations', 'name_and_culture_insights'],
)
def get_api__misc__random__address(
    number: conint(ge=1, le=1000),
    culture: Optional[constr(max_length=100)] = 'en',
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Name', tags=['name_and_culture_insights'])
def get_api__name(
    name_type: NameType = Query(..., alias='nameType'),
    quantity: conint(ge=1, le=5000) = ...,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/Name/BrandName',
    tags=['name_and_culture_insights', 'text_processing_utilities'],
)
def post_api__name__brand_name(
    starting_words: constr(max_length=100) = Query(..., alias='startingWords'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Generate brand name suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/Name/BusinessName', tags=['name_and_culture_insights'])
def post_api__name__business_name(
    number: conint(ge=1, le=1000),
    culture_code: Optional[str] = Query('en_US', alias='cultureCode'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get business names for a specific culture
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Name/Cultures', tags=['name_and_culture_insights'])
def get_api__name__cultures(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    """
    Get available cultures
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Name/Suggestions', tags=['name_and_culture_insights'])
def get_api__name__suggestions(
    starting_words: constr(max_length=100) = Query(..., alias='startingWords'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get business name suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Phone/Countries',
    tags=['financial_data_operations', 'name_and_culture_insights'],
)
def get_api__phone__countries(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    """
    Get available countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Phone/Generate', tags=['phone_services_management'])
def get_api__phone__generate(
    country_code: constr(max_length=2) = Query(..., alias='CountryCode'),
    quantity: conint(ge=1, le=1000) = Query(..., alias='Quantity'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get bulk telephone numbers for a country
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Phone/IMEI', tags=['phone_services_management'])
def get_api__phone__i_m_e_i(
    quantity: conint(ge=1, le=1000) = Query(..., alias='Quantity'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get bulk imeis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Phone/Validate',
    tags=['phone_services_management', 'personal_identification_services'],
)
def get_api__phone__validate(
    telephone: constr(max_length=25),
    country_code: Optional[constr(max_length=2)] = Query(None, alias='CountryCode'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Validate a phone number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/SocialNumber', tags=['personal_identification_services'])
def get_api__social_number(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key')
):
    """
    Generate a social security number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/SocialNumber',
    tags=['personal_identification_services', 'financial_data_operations'],
)
def post_api__social_number(
    id_type: IdType = Query(..., alias='idType'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
    body: NumberValidation = ...,
):
    """
    Validate VAT/identity numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/Text/Humanize', tags=['text_processing_utilities'])
def post_api__text__humanize(
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'), body: TextDto = ...
):
    """
    Humanize text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Text/LoremIpsum', tags=['text_processing_utilities'])
def get_api__text__lorem_ipsum(
    lorem_type: LoremType = Query(..., alias='loremType'),
    type: TextType = ...,
    number: conint(ge=1, le=2147483647) = ...,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Generate lorem ipsum
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Text/Password', tags=['text_processing_utilities'])
def get_api__text__password(
    length: conint(ge=3, le=250),
    has_digits: bool = Query(..., alias='hasDigits'),
    has_uppercase: bool = Query(..., alias='hasUppercase'),
    has_special: bool = Query(..., alias='hasSpecial'),
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Generate password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/Text/Review', tags=['text_processing_utilities'])
def post_api__text__review(
    product: constr(max_length=50),
    quantity: conint(ge=1, le=500) = ...,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
):
    """
    Get reviews (max quantity=500)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/Text/Transform', tags=['text_processing_utilities'])
def post_api__text__transform(
    text_action_type: TextActionType = Query(..., alias='textActionType'),
    case_type: Optional[CaseType] = Query(None, alias='caseType'),
    find: Optional[str] = None,
    replace: Optional[str] = None,
    x__api__key: Optional[str] = Header(None, alias='X-Api-Key'),
    body: TextDto = ...,
):
    """
    Transform text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
